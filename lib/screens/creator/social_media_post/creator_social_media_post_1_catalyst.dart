import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

import 'package:atlast_mobile_app/configs/theme.dart';
import 'package:atlast_mobile_app/constants/catalyst_output_types.dart';
import 'package:atlast_mobile_app/constants/social_media_platforms.dart';
import 'package:atlast_mobile_app/models/annotations_model.dart';
import 'package:atlast_mobile_app/models/catalyst_model.dart';
import 'package:atlast_mobile_app/shared/annotated_text_field.dart';
import 'package:atlast_mobile_app/shared/app_bar_steps.dart';
import 'package:atlast_mobile_app/shared/button.dart';
import 'package:atlast_mobile_app/shared/form_date_picker.dart';
import 'package:atlast_mobile_app/shared/form_multiselect_dropdown.dart';
import 'package:atlast_mobile_app/shared/form_text_field.dart';
import 'package:atlast_mobile_app/shared/hero_heading.dart';
import 'package:atlast_mobile_app/shared/smart_autofill_text.dart';
import 'package:atlast_mobile_app/shared/layouts/full_page.dart';
import 'package:atlast_mobile_app/shared/layouts/single_child_scroll_bare.dart';

class CreatorSocialMediaPostCatalyst extends StatefulWidget {
  final GlobalKey<NavigatorState> navKey;
  final Future<void> Function(
    String catalyst, {
    CatalystOutputTypes type,
  }) analyzeCatalyst;
  final void Function({
    List<int>? postTimestamps,
    int? startTimestamp,
    int? endTimestamp,
    List<SocialMediaPlatforms>? platforms,
    CatalystCampaignOutputTypes? campaignOutputType,
    int? maximumPosts,
  }) updateCatalyst;
  final CatalystBreakdown catalyst;
  final DateAnnotation? dateAnnotation;
  final List<SocialMediaPlatformAnnotation> socialMediaPlatformAnnotations;

  const CreatorSocialMediaPostCatalyst({
    Key? key,
    required this.navKey,
    required this.analyzeCatalyst,
    required this.updateCatalyst,
    required this.catalyst,
    required this.dateAnnotation,
    required this.socialMediaPlatformAnnotations,
  }) : super(key: key);

  @override
  _CreatorSocialMediaPostCatalystState createState() =>
      _CreatorSocialMediaPostCatalystState();
}

class _CreatorSocialMediaPostCatalystState
    extends State<CreatorSocialMediaPostCatalyst> {
  // form variables
  final _formKey = GlobalKey<FormState>();
  String _catalystPrev = "";
  final AnnotatedTextController _catalystInputController =
      AnnotatedTextController();
  final FocusNode _catalystNode = FocusNode();

  List<SocialMediaPlatforms> _listOfSelectedPlatforms = [];
  final GlobalKey _platformNode = GlobalKey(); // hack for non-text field inputs
  bool _isListOfSelectedPlatformsAutoGenerated = false;
  bool _listOfSelectedPlatformsHasError = false;

  final TextEditingController _dateController = TextEditingController();
  DateTime? _postDate;
  final GlobalKey _dateNode = GlobalKey();
  bool _isDateAutoGenerated = false;

  void _handleBack() {
    widget.navKey.currentState!.pop();
  }

  void _handleContinue() {
    widget.navKey.currentState!.pushNamed("/post-2");
  }

  void _handleChangeCatalyst() async {
    if (_catalystPrev == _catalystInputController.text) return;
    _catalystPrev = _catalystInputController.text;

    await widget.analyzeCatalyst(
      _catalystInputController.text,
      type: CatalystOutputTypes.singlePost,
    );

    setState(() {
      if (widget.catalyst.derivedPostTimestamps.isNotEmpty) {
        _postDate = DateTime.fromMillisecondsSinceEpoch(
            widget.catalyst.derivedPostTimestamps[0]);
        _dateController.text = DateFormat('yyyy-MM-dd').format(_postDate!);
        _isDateAutoGenerated = true;
      }

      if (_isListOfSelectedPlatformsAutoGenerated ||
          widget.catalyst.derivedPlatforms.isNotEmpty) {
        _listOfSelectedPlatforms = widget.catalyst.derivedPlatforms;
      }
      if (widget.catalyst.derivedPlatforms.isNotEmpty) {
        _isListOfSelectedPlatformsAutoGenerated = true;
      }
    });
    _catalystNode.requestFocus(); // hack to stop losing focus on setState()
  }

  void _handleChangeSelectedPlatforms(List<dynamic> newList) {
    widget.updateCatalyst(platforms: newList as List<SocialMediaPlatforms>);
    setState(() {
      _listOfSelectedPlatforms = newList;
      _isListOfSelectedPlatformsAutoGenerated = false;
    });
  }

  void _handleChangeDate(DateTime date, String formattedDate) {
    widget.updateCatalyst(postTimestamps: [date.millisecondsSinceEpoch]);
    setState(() {
      String formattedDate = DateFormat('yyyy-MM-dd').format(date);
      _dateController.text = formattedDate;
      _postDate = date;
      _isDateAutoGenerated = false;
    });
  }

  @override
  void initState() {
    super.initState();

    // listen for changes to autofill
    _catalystInputController.addListener(_handleChangeCatalyst);
  }

  Widget _buildForm() {
    List<Annotation> textAnnotations = [];
    if (widget.dateAnnotation != null) {
      textAnnotations.add(Annotation(
        range: widget.dateAnnotation!.range,
        style: widget.dateAnnotation!.style,
      ));
    }
    for (final annot in widget.socialMediaPlatformAnnotations) {
      textAnnotations.add(Annotation(
        range: annot.range,
        style: annot.style,
      ));
    }
    _catalystInputController.annotations = textAnnotations;

    return Form(
      key: _formKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "Describe what your post is about!",
            style: AppText.bodyBold,
          ),
          Padding(
            padding: const EdgeInsets.only(top: 10, bottom: 30),
            child: CustomFormTextField(
              focusNode: _catalystNode,
              controller: _catalystInputController,
              placeholderText:
                  "Ex. Instagram Post tomorrow promoting promoting a discount of \$20 for a dozen roses and free delivery",
              vSize: 6,
              validator: (String? val) {
                if (val == null ||
                    val == "" ||
                    widget.catalyst.derivedPrompt == "") {
                  return 'Enter a more detailed description of your campaign!';
                }
                return null;
              },
            ),
          ),
          const Text(
            "What account(s) do you want to post on?",
            style: AppText.bodyBold,
          ),
          Padding(
            padding: const EdgeInsets.only(top: 10, bottom: 30),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                CustomFormMultiselectDropdown(
                  listOfOptions: socialMediaPlatformsOptions,
                  listOfSelectedOptions: _listOfSelectedPlatforms,
                  setListOfSelectedOptions: _handleChangeSelectedPlatforms,
                  placeholder: "Select platform(s)",
                  hasError: _listOfSelectedPlatformsHasError,
                  validationMsg: "Select at least one platform!",
                  key: _platformNode,
                ),
                // SizedBox(
                //   width: double.infinity,
                //   child: CustomFormTextDropdown(
                //     focusNode: _platformNode,
                //     value: _postPlatform != null
                //         ? socialMediaPlatformsOptions[_postPlatform]!
                //         : null,
                //     handleChanged: _handleChangeSelectedPlatform,
                //     items: socialMediaPlatformsOptions.values.toList(),
                //     validator: (String? val) {
                //       if (val == null || val == "") {
                //         return "Must select a platform!";
                //       }
                //       return null;
                //     },
                //   ),
                // ),
                if (_isListOfSelectedPlatformsAutoGenerated)
                  const SmartAutofillText(),
              ],
            ),
          ),
          const Text(
            "When would you like your post?",
            style: AppText.bodyBold,
          ),
          Padding(
            padding: const EdgeInsets.only(top: 10, bottom: 30),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SizedBox(
                  width: double.infinity,
                  child: CustomFormDatePicker(
                    key: _dateNode,
                    controller: _dateController,
                    currDate: DateTime.now(),
                    setDate: _handleChangeDate,
                    startDate: DateTime.now(),
                    placeholderText: "Post date",
                    validator: (String? val) {
                      if (val == null || val == "") {
                        return "Post date cannot be empty!";
                      }
                      return null;
                    },
                  ),
                ),
                if (_isDateAutoGenerated) const SmartAutofillText()
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return LayoutFullPage(
      handleBack: _handleBack,
      appBarContent: const AppBarSteps(totalSteps: 4, currStep: 1),
      content: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const HeroHeading(text: "Make a Post"),
          Expanded(
            child: SingleChildScrollBare(
              child: Padding(
                padding: const EdgeInsets.only(bottom: 20),
                child: _buildForm(),
              ),
            ),
          ),
          SizedBox(
            width: double.infinity,
            child: CustomButton(
              handlePressed: () {
                // FocusManager.instance.primaryFocus?.unfocus();
                _formKey.currentState!.save();
                // Validate returns true if the form is valid, or false otherwise.

                // Validate returns true if the form is valid, or false otherwise.
                bool platformsErrorCheck = _listOfSelectedPlatforms.isEmpty;
                bool datesErrorCheck = _dateController.text == "";

                if (platformsErrorCheck != _listOfSelectedPlatformsHasError) {
                  setState(() {
                    _listOfSelectedPlatformsHasError = platformsErrorCheck;
                  });
                  if (_platformNode.currentContext != null) {
                    Scrollable.ensureVisible(_platformNode.currentContext!);
                  }
                } else if (datesErrorCheck) {
                  if (_dateNode.currentContext != null) {
                    Scrollable.ensureVisible(_dateNode.currentContext!);
                  }
                }
                if (_formKey.currentState!.validate() &&
                    !platformsErrorCheck &&
                    !datesErrorCheck) {
                  _handleContinue();
                }
              },
              fillColor: AppColors.primary,
              text: 'Continue',
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _catalystInputController.removeListener(_handleChangeCatalyst);
    _catalystInputController.dispose();
    _catalystNode.dispose();
    super.dispose();
  }
}
